#vertices = [$a, $b, $c, $d, $e, $f]
#edges = []:merge(
  [ $a [ $b [ 7  ] ] ],
  [ $a [ $c [ 9  ] ] ],
  [ $a [ $f [ 14 ] ] ],
  [ $b [ $c [ 10 ] ] ],
  [ $b [ $d [ 15 ] ] ],
  [ $c [ $d [ 11 ] ] ],
  [ $c [ $f [ 2  ] ] ],
  [ $d [ $e [ 6  ] ] ],
  [ $e [ $f [ 9  ] ] ]
)
#startNode = $a

@record Link( Object from, Object to, Integer cost, Object lastNode) <

#input = []
#output = []
for #v vertices.each() 
  if !startNode.equals(v) 
    input.set(new Link(startNode, v, edges:[startNode]:[v]:as(@Integer, null), startNode))
  <
<

@Link lowestCost(Subject input)
  #withCost = input.eachAs(@Link).select($(l) l:cost != null)
  #lowest = withCost.first()
  for #l withCost, if lowest:cost > l:cost, lowest = l
  return lowest
<

for #lc Sequence:pull($() lowestCost(input))
  if lc == null, break
  input.unset(lc)
  output.put(lc:to, lc:lastNode)
  for #l edges.in(lc:to) 
    for #i input.eachAs(@Link) 
      #sumCost = l:in:asInt + lc:cost
      if i:to:equals(l:one) && (i:cost == null || i:cost > sumCost) 
        input.swap(i, new Link(i:from, i:to, sumCost, lc:to))
      <
    <
  <
<

@void printOutput(Subject output)
  #c = output:reverse:cascade()
  for #o c 
    print(c:firstFall ? "[ " !! "\n  ")
    print("#{o:in:raw}-->#{o:raw}")
  <
  pln(" ]")
<

pln("Output:")
printOutput(output)

@Subject shortestPath(Subject output, String from, String to)
  #path = [to]
  while !Objects.equals(path:last:raw, from)
    path.alter(output.in(path:last:raw))
  <
  return path
<

@void printPath(Subject path)
  #c = path:reverse:cascade
  for #o c
    print(c:firstFall ? "[ " !! "-->")
    print(o:raw)
  <
  pln(" ]")
<

pln("\nShortest path from 'a' to 'e':")
printPath(shortestPath(output, "a", "e"))
pln("\nShortest path from 'a' to 'f':")
printPath(shortestPath(output, "a", "f"))