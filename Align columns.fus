#input = "
  Given$a$text$file$of$many$lines,$where$fields$within$a$line$\n
  are$delineated$by$a$single$'dollar'$character,$write$a$program\n
  that$aligns$each$column$of$fields$by$ensuring$that$words$in$each$\n
  column$are$separated$by$at$least$one$space.\n
  Further,$allow$for$each$word$in$a$column$to$be$either$left$\n
  justified,$right$justified,$or$center$justified$within$its$column.\n
"

#lengths = []\\ #[&[Integer]]
#tokens = []\\ #[&[&[String]]]

for #line split(input, "\n")
  #tl = []
  #newLengths = []
  #lc = lengths:cascade
  for #t split(line, "\\$")
    if lc:hasNext
      #n = lc:next
      newLengths[[Math:max(n:in:asInt, t:length + 1)]]
    < else
      newLengths[[t:length]]
    <
    tl[[t]]
  <
  for #l lc, newLengths[[l:in:raw]]
  lengths = newLengths
  tokens[#[tl]]
<

lengths:print

for #t tokens:eachIn
  #lc = lengths:eachIn:eachInt:cascade
  #steps = steps(0):cascade
  for #t1 t:eachIn:eachString
    #l = lc:next
    #i = steps:next
    print(i % 3 == 2 ? justifyRight(t1, l) !! i % 3 == 1 ? justifyCenter(t1, l) !! justifyLeft(t1, l))
  <
  pln()
<

@String justifyLeft(String str, int totalLength)
  return str + " ".repeat(totalLength - str:length)
<

@String justifyRight(String str, int totalLength)
  return " ".repeat(totalLength - str:length - 1) + str + " "
<

@String justifyCenter(String str, int totalLength)
  return " ".repeat((totalLength - str:length) / 2) + str + " ".repeat((totalLength - str:length - 1) / 2 + 1)
<