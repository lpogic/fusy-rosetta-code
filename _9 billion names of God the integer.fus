@Series partition(int total, int partMax)
  if total < 1, return [[]]
  if total < 2, return [[[1]]]
  if partMax > total, partMax = total
  #parts = []
  for #i range(0, partMax - 1)
    for #p partition(total - partMax + i, partMax - i):eachIn
      parts.inset([[partMax - i]] #= p)
    <
  <
  return parts
<

@Series partition(int i)
  return partition(i, i)
<

\\partition(3).print()

@void inc(Subject s, Object k)
  s.in(k).reset(s.in(k).orGiven(0) + 1)
<

@void triangle(int size)
  #toStr = @{Integer}String @(i)
    return i < 10 ? " #i  " !! i < 100 ? " #i " !! "#i "
  <

  for #i range(1, size)
    print(" ".repeat((size - i) << 1))
    #c = []
    for #p partition(i):eachIn:eachIn:eachInt, inc(c, p)
    for #ii range(1, i), print(toStr:(c.in(ii).orGiven(0)))
    out:println
  <
<

triangle(25)

@int G(int n) > partition(n):set:size <

println("G(23) = #[G(23)]")
\\println("G(123) = #[G(123)]")
\\println("G(1234) = #[G(1234)]")
\\println("G(12345) = #[G(12345)]")
  