@case bm \ import{ BigMath } <

@BigInteger add(BigInteger a, BigInteger b) return a.add(b) <
@BigInteger mul(BigInteger a, BigInteger b) return a.multiply(b) <
@BigInteger div(BigInteger a, BigInteger b) return a.divide(b) <
@BigInteger fct(BigInteger f)
  #one = bm:i1
  return f.compareTo(one) == 1 ? f.multiply(fct(f.subtract(one))) !! one <
@BigInteger pow(BigInteger b, int e) return b.pow(e) <

@BigInteger b2p5 = pow(bm:i2, 5)
@BigInteger b3 = bm:int(3)
@BigInteger b6 = bm:int(6)
@BigInteger b9 = bm:int(9)
@BigInteger b126 = bm:int(126)
@BigInteger b532 = bm:int(532)

@BigInteger integerPortion(int i)
  #n = bm:int(i)
  #m1 = mul(b2p5, fct(mul(b6, n)))
  #m2 = mul(m1, add(add(mul(b532, pow(n, 2)), mul(b126, n)), b9))
  return div(m2, mul(b3, pow(fct(n), 6)))
<

for #i steps():first(10), io:println("i = {i}, integer portion: {integerPortion(i)}")

@BigDecimal pi70()
  #mc = bm:ctxUp(72)
  #ppi = bm:d0
  #minE = bm:d10.pow(-70, mc)
  for #i steps()
    #e = bm:dec(integerPortion(i)).multiply(bm:d10.pow(-6 * i - 3, bm:ctx(6 * i + 3)))
    ppi = ppi.add(e)
    if e.compareTo(minE) < 0, return bm:d1:divide(ppi.sqrt(mc), bm:ctxDown(71))
  <
  drop "Unreachable"
<

io:println("PI to 70 decimal digits of precision: {pi70()}")