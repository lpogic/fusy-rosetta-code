@boolean playOptimal(int n)
  #drawers = mix(range(1, n):series).index(range(1, n)).set()
 
  PRISONER!! for #i range(1, n)
    #prev = i
    for #j range(1, n / 2)
      #picked = drawers:[prev]:asInt
      if picked == i, continue PRISONER
      prev = picked
    <
    return false
  < 
  return true
<

@boolean playRandom(int n)
  #drawers = mix(range(0, n):series)

  PRISONER!! for #d drawers:eachInt
    #trials = mix(range(0, n):series).first(n / 2)
    for #t trials:eachInt
      if d == t, continue PRISONER
    <
    return false
  <
  return true
<

@double exec(int n, int p, {Integer}Boolean strategy)
  #succ = 0
  for #i = 0; i < n; ++i
    if strategy:(p), succ++
  <
 return 100.0 * succ / n
<

#n = 100_000
#p = 100
pln("\# of executions: #n")
pln("Optimal play success rate: #{exec(n, p, this::playOptimal)}%")
pln("Random play success rate: #{exec(n, p, this::playRandom)}%")