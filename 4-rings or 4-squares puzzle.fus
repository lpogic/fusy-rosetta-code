@int solve(Subject letters, Subject digits, Subject sums, boolean allowRepetitions, boolean printResults)
  #solutionCnt = 0
  pin DIGS for #d alg:words(digits, letters:size, allowRepetitions)
    #ld = d:eachIn.index(letters:each):set
    #cs = sums:cascade
    #si = @{Subject}Integer(cs:next:one)
    #sum = si:(ld)
    for #s cs
      si = s:one
      if si:(ld):intValue != sum, continue DIGS
    <
    if printResults
      io:print("Found solution: ")
      #ldc = ld:cascade
      for #ldi ldc
        io:print("{ldi:one} = {ldi:in:one}")
        if ldc:hasNext, io:print(", ")
      <
      io:println("")
    <
    ++solutionCnt
  <
  return solutionCnt
<


#nodes = [
  @{Subject}Integer({s}> s..a:int + s..b:int) []
  @{Subject}Integer({s}> s..b:int + s..c:int + s..d:int) []
  @{Subject}Integer({s}> s..d:int + s..e:int + s..f:int) []
  @{Subject}Integer({s}> s..f:int + s..g:int) []
]
#letters = range(0, 6).convert({i}> string('a' + i)):set
#digits = []

io:println("Looking for solutions for unique digits LOW=1  HIGH=7")
digits = range(1, 7):series:eachOut:set
solve(letters, digits, nodes, false, true)

io:println("Looking for solutions for unique digits LOW=3  HIGH=9")
digits = range(3, 9):series:eachOut:set
solve(letters, digits, nodes, false, true)

\\\
io:println("Looking for solutions for digits LOW=0  HIGH=9")
digits = range(0, 9):series:eachOut:set
#result = solve(letters, digits, nodes, true, false)
out:println("Found {result} solutions")
\\\