@int sigmaSum(int n)
  if n < 2, return n
  #sigmaSum = n + 1
  #root = Math.sqrt(n)
  for #i range(2, @int(root)), if 0 == (n % i)
    sigmaSum += i
    if i < root, sigmaSum += n / i
  <
  return sigmaSum
<

@Sequence<Subject> abundantOdd(int since)
  return pull(extends {}Subject()
    @int last = (since % 2) == 0 ? since - 1 !! since - 2

    @Subject apply()
      while true
        last += 2
        #ss = sigmaSum(last)
        if ss > last * 2, return [ last [ ss ] ]
      <
    <
  <)
<

@void first25()
  for #n abundantOdd(1).first(25), io:println("{n:int}, sigma sum: {n:in:int}")
<

@void tousandth()
  #n = abundantOdd(1).select(999)
  io:println("{n:int}, sigma sum: {n:in:int}")
<

@void billioner()
  #n = abundantOdd(1_000_000_000).first()
  io:println("{n:int}, sigma sum: {n:in:int}")
<

io:println("The first 25 abundant odd numbers are:")
first25()
io:println("The one thousandth abundant odd number is:")
tousandth()
io:println("The first abundant odd number above one billion is:")
billioner()