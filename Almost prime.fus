@boolean isPrime(int n)
  #sqrtn = @int(Math.sqrt(n))
  for #i range(2, sqrtn), if n % i == 0, return false
  return true
<

@Sequence<Integer> primes()
  return pull(extends {}Integer()
    @int last = 1
    @Integer apply()
      while !isPrime(++last) <
      return last
    <
  )
<

@boolean isAlmostPrime(int k, int n)
  #pk = 0
  for #p primes()
    if p > n, break
    while n % p == 0
      n /= p
      ++pk
    <
  <
  return pk == k
<

@void printAlmostPrimes(int k, Subject almostPrimes)
  io:print("Almost primes for k = {k}: ")
  for #ap #c(almostPrimes:eachInt:cascade)
     io:print(ap)
     if c:hasNext, io:print(", ")
  <
  io:println
<

for #k range(1, 5)
  #almostPrimes = []
  for #n steps(2)
    if isAlmostPrime(k, n), almostPrimes ## n
    if almostPrimes:size >= 10, break
  <
  printAlmostPrimes(k, almostPrimes)
<
    